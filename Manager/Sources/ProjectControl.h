/////////////////////////////////////////////////////////////////////////////
// Name:        ProjectControl.h
// Purpose:     Beremiz Project Manager project management functions
// Author:      Benoit BOUCHEZ
// Created:     12/05/2022
/////////////////////////////////////////////////////////////////////////////

/*
* MIT License
*
* Copyright(c) 2020 - 2024 Benoit BOUCHEZ
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files(the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions :
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
*/

#ifndef __PROJECTCONTROL_H__
#define __PROJECTCONTROL_H__

#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

#include "BeremizProjectManager_SDK_Defs.h"
#include "TargetPluginClass.h"

class CBeremizProject
{
public:
	CBeremizProject();
	~CBeremizProject();

	//! Reset project structure as an empty project
	void CleanProject (void);

	//! Store locally project path and compute name from the path (as the folder name is the project name)
	void SetPathAndName (wxString ProjectFolder);

	//! Store locally path where framework files are stored
	void SetTargetsPath (wxString Path);

	//! Create/copy the Beremiz base files (for Beremiz IDE) in the project directory
	// IMPORTANT : this operation shall only be done when project is created, as this create an empty PLC program
	int CreateBeremizProjectFiles (void);

	//! Copy PLC framework (standard runtime files, not the user project files) to the compilation directory (including on remote target)
	int GenerateTargetFramework (void);

	//! Copy generated PLC files in the compilation directory (including on remote target if necessary)
	int CopyPLCFilesForCompilation (void);

	int GenerateIOConfigurationFiles (void);
	
	//! Load a Beremizproject file
	int LoadProject (void);
	//! Save Beremiz Project Manager project file
	int SaveProject (void);
	//! Load target plugin associated with the project
	void SetTargetPlugin (wxString PluginName);
	//! Return name of CPU as a displayable string
	wxString GetCPUDisplayName (void);

	wxString GetProjectPath (void);
	wxString GetProjectName (void);

	// Target control via communication supervisor
	int SetAutomaticPLCStart (bool ShallStart);

	//! Initiates the compilation process
	//! \return 0 if compilation is fully external, <0 in case of error, >0 indicates that external compilation process has started successfully
	int StartCompilation (void);

	int StartPLC (void);
	int StopPLC (void);
	int GetCompilerMessages (char* LogBuffer);

	/* Corrects the problem of pous.c file generated by MatIEC for each resource
	The resource files contain a #include "pous.c" line which is problematic with some compilers.
	These compilers use a makefile which compile all the .c files, including pous.c, 
	which lead to errors as pous.c is in fact an include file
	*/
	int ProcessBeremizC_POU (void);

	int OpenEditor (wxWindow* Parent, unsigned int EditorIndex);
	//! Request the plugin to close edition window
	//! \param EditorIndex : if -1, requires all editor windows handled by plugin to close
	void CloseEditor (int EditorIndex);

	bool TargetPluginLoaded;
	TargetPluginClass* TargetPlugin;

	//! Return true if local data or target plugin data has changed
	bool HasChanged (void);

private:
	wxString TargetLibraryName;		// Name of dynamic library plugin
	wxString ProjectPath;
	wxString ProjectName;
	wxString TargetsPath;

	bool DataHasChanged;		// True if project has been modified (to inform user he may loose data if he closes the project without saving) 

	/*
	Funnction to replace the line
	#include "pous.c" by #include "pous2.h" 
	in file Resource1.c generated by IEC2C
	*/
	/* Note : it would be probably better to edit MatIEC source code and recompile
	it but for now it is easier to write this method */
	int POU_Includer (wxString InFileName, wxString OutFileName);
};

#endif